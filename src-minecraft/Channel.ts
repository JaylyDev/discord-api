import { Client } from "./Client";
import { CreateMessage } from '../src-discord/Resources/Channels';
import fetch from './net-request';
import { Guild } from "./Guild";
import type { APIActionRowComponent, APIAllowedMentions, APIApplication, APIAttachment, APIChannel, APIChannelMention, APIEmbed, APIMessage, APIMessageActionRowComponent, APIMessageActivity, APIMessageInteraction, APIMessageReference, APIReaction, APIStickerItem, APIThreadChannel, APIUser, MessageFlags, MessageType, RESTPostAPIChannelMessageJSONBody, Snowflake } from "discord-api-types/v9";
import { User } from "./User";
import { ThreadChannel } from "./factory/Channels";

export interface PostChannelMessageBody {
  /**
   * The message contents (up to 2000 characters)
   */
  content?: string;
  /**
   * A nonce that can be used for optimistic message sending
   */
  nonce?: number | string;
  /**
   * `true` if this is a TTS message
   */
  tts?: boolean;
  /**
   * Embedded `rich` content (up to 6000 characters)
   *
   * See https://discord.com/developers/docs/resources/channel#embed-object
   */
  embeds?: APIEmbed[];
  /**
   * Embedded `rich` content
   *
   * See https://discord.com/developers/docs/resources/channel#embed-object
   * @deprecated Use `embeds` instead
   */
  embed?: APIEmbed;
  /**
   * Allowed mentions for a message
   *
   * See https://discord.com/developers/docs/resources/channel#allowed-mentions-object
   */
  allowed_mentions?: APIAllowedMentions;
  /**
   * The components to include with the message
   *
   * See https://discord.com/developers/docs/interactions/message-components#component-object
   */
  components?: APIActionRowComponent<APIMessageActionRowComponent>[];
  /**
   * IDs of up to 3 stickers in the server to send in the message
   *
   * See https://discord.com/developers/docs/resources/sticker#sticker-object
   */
  sticker_ids?: [Snowflake] | [Snowflake, Snowflake] | [Snowflake, Snowflake, Snowflake];
  /**
   * Attachment objects with filename and description
   */
  attachments?: (Pick<APIAttachment, 'id' | 'description'> & Partial<Pick<APIAttachment, 'filename'>>)[];
  /**
   * Message flags combined as a bitfield
   */
  flags?: MessageFlags;
};

export class Message {
  /** @internal */
  private readonly client: Client;
  /**
   * ID of the message
   */
  readonly id: string;
  /**
   * ID of the channel the message was sent in
   */
  readonly channelId: string;
  /**
   * The author of this message (only a valid user in the case where the message is generated by a user or bot user)
   *
   * If the message is generated by a webhook, the author object corresponds to the webhook's id,
   * username, and avatar. You can tell if a message is generated by a webhook by checking for the `webhook_id` property
   *
   * See https://discord.com/developers/docs/resources/user#user-object
   */
  readonly author: User;
  /**
   * Contents of the message
   *
   * The `MESSAGE_CONTENT` privileged gateway intent will become required after **August 31, 2022** for verified applications to receive a non-empty value from this field
   *
   * In the Discord Developers Portal, you need to enable the toggle of this intent of your application in **Bot > Privileged Gateway Intents**
   *
   * See https://support-dev.discord.com/hc/articles/4404772028055
   */
  readonly content: string;
  /**
   * When this message was sent
   */
  readonly timestamp: string;
  /**
   * When this message was edited (or null if never)
   */
  readonly editedTimestamp: string;
  /**
   * Whether this was a TTS message
   */
  readonly tts: boolean;
  /**
   * Whether this message mentions everyone
   */
  readonly mentionEveryone: boolean;
  /**
   * Users specifically mentioned in the message
   *
   * The `member` field is only present in `MESSAGE_CREATE` and `MESSAGE_UPDATE` events
   * from text-based guild channels
   *
   * See https://discord.com/developers/docs/resources/user#user-object
   * See https://discord.com/developers/docs/resources/guild#guild-member-object
   */
  readonly mentions: APIUser[];
  /**
   * Roles specifically mentioned in this message
   *
   * See https://discord.com/developers/docs/topics/permissions#role-object
   */
  readonly mentionRoles: string[];
  /**
   * Channels specifically mentioned in this message
   *
   * Not all channel mentions in a message will appear in `mention_channels`.
   * - Only textual channels that are visible to everyone in a lurkable guild will ever be included
   * - Only crossposted messages (via Channel Following) currently include `mention_channels` at all
   *
   * If no mentions in the message meet these requirements, this field will not be sent
   *
   * See https://discord.com/developers/docs/resources/channel#channel-mention-object
   */
  readonly mentionChannels?: APIChannelMention[];
  /**
   * Any attached files
   *
   * See https://discord.com/developers/docs/resources/channel#attachment-object
   *
   * The `MESSAGE_CONTENT` privileged gateway intent will become required after **August 31, 2022** for verified applications to receive a non-empty value from this field
   *
   * In the Discord Developers Portal, you need to enable the toggle of this intent of your application in **Bot > Privileged Gateway Intents**
   *
   * See https://support-dev.discord.com/hc/articles/4404772028055
   */
  readonly attachments: APIAttachment[];
  /**
   * Any embedded content
   *
   * See https://discord.com/developers/docs/resources/channel#embed-object
   *
   * The `MESSAGE_CONTENT` privileged gateway intent will become required after **August 31, 2022** for verified applications to receive a non-empty value from this field
   *
   * In the Discord Developers Portal, you need to enable the toggle of this intent of your application in **Bot > Privileged Gateway Intents**
   *
   * See https://support-dev.discord.com/hc/articles/4404772028055
   */
  readonly embeds: APIEmbed[];
  /**
   * Reactions to the message
   *
   * See https://discord.com/developers/docs/resources/channel#reaction-object
   */
  readonly reactions?: APIReaction[];
  /**
   * A nonce that can be used for optimistic message sending (up to 25 characters)
   *
   * **You will not receive this from further fetches. This is received only once from a `MESSAGE_CREATE`
   * event to ensure it got sent**
   */
  readonly nonce?: string | number;
  /**
   * Whether this message is pinned
   */
  readonly pinned: boolean;
  /**
   * If the message is generated by a webhook, this is the webhook's id
   */
  readonly webhookId?: string;
  /**
   * Type of message
   *
   * See https://discord.com/developers/docs/resources/channel#message-object-message-types
   */
  readonly type: MessageType;
  /**
   * Sent with Rich Presence-related chat embeds
   *
   * See https://discord.com/developers/docs/resources/channel#message-object-message-activity-structure
   */
  readonly activity?: APIMessageActivity;
  /**
   * Sent with Rich Presence-related chat embeds
   *
   * See https://discord.com/developers/docs/resources/application#application-object
   */
  readonly application?: Partial<APIApplication>;
  /**
   * If the message is a response to an Interaction, this is the id of the interaction's application
   */
  readonly applicationId?: string;
  /**
   * Reference data sent with crossposted messages, replies, pins, and thread starter messages
   *
   * See https://discord.com/developers/docs/resources/channel#message-reference-object-message-reference-structure
   */
  readonly messageReference?: APIMessageReference;
  /**
   * Message flags combined as a bitfield
   *
   * See https://discord.com/developers/docs/resources/channel#message-object-message-flags
   *
   * See https://en.wikipedia.org/wiki/Bit_field
   */
  readonly flags?: MessageFlags;
  /**
   * The message associated with the `message_reference`
   *
   * This field is only returned for messages with a `type` of `19` (REPLY).
   *
   * If the message is a reply but the `referenced_message` field is not present,
   * the backend did not attempt to fetch the message that was being replied to,
   * so its state is unknown.
   *
   * If the field exists but is `null`, the referenced message was deleted
   *
   * See https://discord.com/developers/docs/resources/channel#message-object
   */
  readonly referencedMessage?: APIMessage;
  /**
   * Sent if the message is a response to an Interaction
   */
  readonly interaction?: APIMessageInteraction;
  /**
   * Sent if a thread was started from this message
   */
  readonly thread?: ThreadChannel;
  /**
   * Sent if the message contains components like buttons, action rows, or other interactive components
   *
   * The `MESSAGE_CONTENT` privileged gateway intent will become required after **August 31, 2022** for verified applications to receive a non-empty value from this field
   *
   * In the Discord Developers Portal, you need to enable the toggle of this intent of your application in **Bot > Privileged Gateway Intents**
   *
   * See https://support-dev.discord.com/hc/articles/4404772028055
   */
  readonly components?: APIActionRowComponent<APIMessageActionRowComponent>[];
  /**
   * Sent if the message contains stickers
   *
   * See https://discord.com/developers/docs/resources/sticker#sticker-item-object
   */
  readonly stickerItems?: APIStickerItem[];
  /**
   * A generally increasing integer (there may be gaps or duplicates) that represents the approximate position of the message in a thread
   *
   * It can be used to estimate the relative position of the message in a thread in company with `total_message_sent` on parent thread
   */
  readonly position?: number;
  /**
   * The guild this channel belongs to for reference.
   */
  readonly guild: Guild;

  reply (options: PostChannelMessageBody) {
    const nativeOptions: RESTPostAPIChannelMessageJSONBody = {
      ...options,
      // message_reference must overwrite options
      message_reference: {
        channel_id: this.channelId,
        fail_if_not_exists: true,
        guild_id: this.guild.id,
        message_id: this.id
      },
    };
    CreateMessage(this.channelId, nativeOptions, this.client['token'], fetch);
  };

  /** @internal */
  constructor (response: APIMessage, client: Client, guild: Guild) {
    this.id = response.id;
    this.channelId = response.channel_id;
    this.author = new User(response.author, client);
    this.content = response.content;
    this.timestamp = response.timestamp;
    this.editedTimestamp = response.edited_timestamp;
    this.tts = response.tts;
    this.mentionEveryone = response.mention_everyone;
    this.mentions = response.mentions;
    this.mentionRoles = response.mention_roles;
    this.mentionChannels = response.mention_channels;
    this.attachments = response.attachments;
    this.embeds = response.embeds;
    this.reactions = response.reactions;
    this.nonce = response.nonce;
    this.pinned = response.pinned;
    this.webhookId = response.webhook_id;
    this.type = response.type;
    this.activity = response.activity;
    this.application = response.application;
    this.applicationId = response.application_id;
    this.messageReference = response.message_reference;
    this.flags = response.flags;
    this.referencedMessage = response.referenced_message;
    this.interaction = response.interaction;
    this.thread = !!response.thread ? new ThreadChannel(response.thread as APIThreadChannel) : undefined;
    this.components = response.components;
    this.stickerItems = response.sticker_items;
    this.position = response.position;

    this.guild = guild;
    this.client = client;
  };
};